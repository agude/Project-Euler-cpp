// Copyright (C) 2011  Alexander Gude - alex.public.account+ProjectEulerSolutions@gmail.com

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// The most recent version of this program is avaible at: 
// http://github.com/Falcorian/Project-Euler-Solutions

/*
 * Triangle, pentagonal, and hexagonal numbers are generated by the following
 * formulae:
 *
 * Triangle        Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
 * Pentagonal      Pn=n(3n-1)/2     1, 5, 12, 22, 35, ...
 * Hexagonal       Hn=n(2n-1)       1, 6, 15, 28, 45, ...
 *
 * It can be verified that T285 = P165 = H143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 *
 *
 */

#include <iostream>
#include <cmath>

int returnSumOfFactors(int num){
    int sumOfFactors = 0;

    float fnum = (float)num;
    int max  = (int)floor(sqrt(fnum));

    for(int i = 1; i <= max; i++){
        if(num%i == 0){
            int f1 = i;
            int f2 = num / i;
            if(f1 == f2 && f1 != num){
                sumOfFactors += f1;
            } else {
                if(f1 != num){
                    sumOfFactors += f1;
                }
                if(f2 != num){
                    sumOfFactors += f2;
                }
            }
        }
    }
    return sumOfFactors;
}

int main(){

    int MAX = 28123;
    bool isAbundant[MAX];

    // Find abundant numbers
    for ( int i=1; i <= MAX + 1; i++) {
        if ( returnSumOfFactors(i) > i ) {
            isAbundant[i] = true;
        } else {
            isAbundant[i] = false;
        }
    }

    // Now check which numbers are not a sum
    int tot = 0;
    for ( int i=0; i <= MAX; i++ ) {
        for ( int j=12; j <= MAX; j++ ) {
            if ( isAbundant[j] ) {
                if ( i-j >= 0 && isAbundant[i-j] ) {
                    break;
                } else if ( j >= i ) {
                    tot += i;
                    break;
                }
            }
        }
    }

    std::cout << tot << std::endl;

    return 0;
}
